<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Markdown总结</title>
    <url>/2023/09/04/Markdown%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><p>标题共有6级，越大标题越小<br>html：h1~h6-&gt;markdown：#个数<br>另有语法：&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;和———分别表示一级二级</p>
<h1 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h1><p>创建段落，请使用空白行将一行或多行文本进行分隔。 （回车两次）</p>
<h1 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h1><p>换行处空格（换行前先空格）</p>
<h1 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a>粗体</h1><p>在单词或短语的<strong>前后</strong>各添加两个星号（asterisks）或下划线（underscores）<br><strong>we</strong> are you</p>
<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>块引用<br>多段落引用<br>嵌套块引用<br>块引用中可以添加其他元素</p>
<h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h4 id="有序列表：数字加点"><a href="#有序列表：数字加点" class="headerlink" title="有序列表：数字加点"></a>有序列表：数字加点</h4><p>1.this is example  </p>
<h4 id="无序列表："><a href="#无序列表：" class="headerlink" title="无序列表："></a>无序列表：</h4><p>要创建无序列表，请在每个列表项前面添加破折号 (-)、星号 (*) 或加号 (+) 。缩进一个或多个列表项可创建嵌套列表。 </p>
<ul>
<li>First item</li>
<li>Second item</li>
<li>Third item<ul>
<li>Indented item</li>
<li>Indented item</li>
</ul>
</li>
<li>Fourth item</li>
</ul>
<hr>
<ul>
<li>要在保留列表连续性的同时在列表中添加另一种元素，请将该元素缩进四个空格或一个制表tab符，，注意是任何元素前都要加tab或四个空格</li>
</ul>
<h1 id="添加代码"><a href="#添加代码" class="headerlink" title="添加代码"></a>添加代码</h1><p>将单词或短语表示为代码，请将其包裹在反引号 (&#96;) 中  </p>
<h4 id="转义反引号"><a href="#转义反引号" class="headerlink" title="转义反引号"></a>转义反引号</h4><p>如果你要表示为代码的单词或短语中包含一个或多个反引号，则可以通过将单词或短语包裹在双反引号(&#96;&#96;)中。  </p>
<h4 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h4><p>要创建代码块，请将代码块的每一行缩进至少四个空格或一个制表符。</p>
<h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><p>要创建分隔线，请在单独一行上使用三个或多个星号 (***)、破折号 (—) 或下划线 (___) ，并且不能包含其他内容。<br>分隔线（Horizontal Rule）用法最佳实践<br>为了兼容性，请在分隔线的前后均添加空白行。</p>
<h1 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h1><p>链接文本放在中括号内，链接地址放在后面的括号中，链接title可选。<br>链接title是当鼠标悬停在链接上时会出现的文字，这个title是可选的，它放在圆括号中链接地址后面，跟链接地址之间以空格分隔。<br><a href="https://markdown.com.cn/basic-syntax/htmls.html" title="1">官方教程</a></p>
<h4 id="网址和Email地址"><a href="#网址和Email地址" class="headerlink" title="网址和Email地址"></a>网址和Email地址</h4><p>使用尖括号可以很方便地把URL或者email地址变成可点击的链接。  </p>
<ul>
<li>为了兼容性，请尽量使用%20代替空格</li>
</ul>
<h1 id="添加图片"><a href="#添加图片" class="headerlink" title="添加图片"></a>添加图片</h1><h2 id="要添加图像，请使用感叹号-然后在方括号增加替代文本，图片链接放在圆括号里，括号里的链接后可以增加一个可选的图片标题文本。"><a href="#要添加图像，请使用感叹号-然后在方括号增加替代文本，图片链接放在圆括号里，括号里的链接后可以增加一个可选的图片标题文本。" class="headerlink" title="要添加图像，请使用感叹号 (!), 然后在方括号增加替代文本，图片链接放在圆括号里，括号里的链接后可以增加一个可选的图片标题文本。 "></a>要添加图像，请使用感叹号 (!), 然后在方括号增加替代文本，图片链接放在圆括号里，括号里的链接后可以增加一个可选的图片标题文本。 </h2><p>链接图片:就是将添加图片的语法放入超链接中括号内</p>
<h1 id="转义字符（使用被用符号）"><a href="#转义字符（使用被用符号）" class="headerlink" title="转义字符（使用被用符号）"></a>转义字符（使用被用符号）</h1><p>显示原本用于格式化 Markdown 文档的字符，请在字符前面添加反斜杠字符 \ 。<br>两个特殊符号</p>
<h1 id="Markdown-内嵌-HTML-标签"><a href="#Markdown-内嵌-HTML-标签" class="headerlink" title="Markdown 内嵌 HTML 标签"></a>Markdown 内嵌 HTML 标签</h1><p>HTML 用法<br>出于安全原因，并非所有 Markdown 应用程序都支持在 Markdown 文档中添加 HTML。如有疑问，请查看相应 Markdown 应用程序的手册。某些应用程序只支持 HTML 标签的子集。<br>一句话总结：最好不要在markdown里写html，除非你非常熟练。</p>
<hr>
]]></content>
  </entry>
  <entry>
    <title>gdb</title>
    <url>/2023/09/12/gdb/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>python爬虫</title>
    <url>/2023/09/04/python%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="http基本原理"><a href="#http基本原理" class="headerlink" title="http基本原理"></a>http基本原理</h2><ul>
<li><p>URL(统一资源定位符):通俗来说就是网址  </p>
</li>
<li><p>超文本html  </p>
</li>
<li><p>http和https  </p>
<ul>
<li>https简单来说就是http的安全版，即http加入了SSL层<blockquote>
<p>主要作用:  </p>
<ul>
<li>建立一个信息安全通道来保证数据安全  </li>
<li>确认网站真实性,除此之外还可以通过CA证书查询</li>
</ul>
</blockquote>
</li>
</ul>
<p>一个小案例:<br>12306虽然使用了https任然会被提示不安全,是因为12306的CA证书是自行签发的,不受CA机构信任,但是它的数据传输确实使用了SSL加密,如果要爬取类似站点,需要设置忽略证书选项,否则会提示SSL链接错误</p>
<p>http的请求过程  </p>
<h3 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h3><p>请求方式:GET 和 POST<br>GET是最平常的方式<br>涉及到敏感信息,文件过大使用POST</p>
<p>请求头,其中重点关注Cookie,Referer,User-Agent,Content-type,host等</p>
<p>请求体:表单数据,即POST提交的数据</p>
<h3 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h3><p>响应分为三部分:响应状态码如(404\200),响应头,响应体</p>
</li>
</ul>
<h2 id="网页基础-略"><a href="#网页基础-略" class="headerlink" title="网页基础(略)"></a>网页基础(略)</h2><h2 id="爬虫的基本原理"><a href="#爬虫的基本原理" class="headerlink" title="爬虫的基本原理"></a>爬虫的基本原理</h2><p>1.简单来说,爬虫就是获取网页并<strong>提取</strong>和保存信息的<strong>自动化</strong>程序</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>2.一般来说,网页上更多是通过JavaScript渲染过的,所以通过像只能抓取html的requests库不满足爬虫需求<br>3.图片视频被保存为二进制文件.</p>
<h3 id="会话和Cookie-自动登录的魔法书"><a href="#会话和Cookie-自动登录的魔法书" class="headerlink" title="会话和Cookie(自动登录的魔法书)"></a>会话和Cookie(自动登录的魔法书)</h3><p>会话: 服务端,也是网站服务器,用来保存用户的会话信息<br>Cookie: 客户端,,也是浏览器端,用来判断用户身份和登录状态<br>Cookie的属性结构:</p>
<h3 id="代理的基本原理"><a href="#代理的基本原理" class="headerlink" title="代理的基本原理"></a>代理的基本原理</h3><p>处理爬虫过程中访问频繁导致的封IP<br>代理的作用:<br>常见代理方式:<br>免费代理,付费代理<br>ADSL……</p>
]]></content>
  </entry>
</search>
